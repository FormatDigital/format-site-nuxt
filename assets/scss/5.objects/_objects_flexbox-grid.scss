/**
 * OBJECTS.GRID
 *
 * @description : Core layout objects used in addition to the grid
 *
 */



.wrapper {
    box-sizing: border-box;
    max-width: $grid-max-width;
    margin: 0 auto;
}

.container-fluid {
    margin-right: auto;
    margin-left: auto;
}

.row {
    box-sizing: border-box;
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;
    margin-right: $gutter-compensation;
    margin-left: $gutter-compensation;

    &.collapse {
        [class^='col-'] {
            padding-left: 0;
            padding-right: 0;
            
        }
    }
}

.row.reverse {
    flex-direction: row-reverse;
}

.col.reverse {
    flex-direction: column-reverse;
}

@mixin grid-col-common {
    box-sizing: border-box;
    
    flex-grow: 0;
    flex-shrink: 0;
    
    // we leave flex-basis: auto out of common because
    // in some spots we need it and some we dont
    // more why here: https://github.com/kristoferjoseph/flexboxgrid/issues/126
    
    padding-right: $half-gutter-width;
    padding-left: $half-gutter-width;
}

$name: xs;
.col-#{$name} {
    @include grid-col-common;
    flex-basis: auto;
}
@for $i from 1 through $grid-columns {
    .col-#{$name}-#{$i} {
        @include grid-col-common;
        flex-basis: 100% / $grid-columns * $i;
        max-width: 100% / $grid-columns * $i;
    }
}
@for $i from 0 through $grid-columns {
    .col-#{$name}-offset-#{$i} {
        @include grid-col-common;
        @if $i == 0 {
            margin-left: 0;
        } @else {
            margin-left: 100% / $grid-columns * $i;
        }
    }
}
.col-#{$name} {
    flex-grow: 1;
    flex-basis: 0;
    max-width: 100%;
}
.start-#{$name} {
    justify-content: flex-start;
    text-align: left;
}

.center-#{$name} {
    justify-content: center;
    text-align: center;
}

.end-#{$name} {
    justify-content: flex-end;
    text-align: right;
}

.top-#{$name} {
    align-items: flex-start;
}

.middle-#{$name} {
    align-items: center;
}

.bottom-#{$name} {
    align-items: flex-end;
}

.around-#{$name} {
    justify-content: space-around;
}

.between-#{$name} {
    justify-content: space-between;
}

.first-#{$name} {
    order: -1;
}

.last-#{$name} {
    order: 1;
}


@each $breakpoint in $breakpoints {
    $name: nth($breakpoint, 1);
    $size: nth($breakpoint, 2);
    
    @media only screen and (min-width: $size) {
        .col-#{$name} {
            @include grid-col-common;
            flex-basis: auto;
        }
        @for $i from 1 through $grid-columns {
            .col-#{$name}-#{$i} {
                @include grid-col-common;
                flex-basis: 100% / $grid-columns * $i;
                max-width: 100% / $grid-columns * $i;
            }
        }
        @for $i from 0 through $grid-columns {
            .col-#{$name}-offset-#{$i} {
                @include grid-col-common;
                @if $i == 0 {
                    margin-left: 0;
                } @else {
                    margin-left: 100% / $grid-columns * $i;
                }
            }
        }
        .col-#{$name} {
            flex-grow: 1;
            flex-basis: 0;
            max-width: 100%;
        }
        .start-#{$name} {
            justify-content: flex-start;
            text-align: left;
        }
        
        .center-#{$name} {
            justify-content: center;
            text-align: center;
        }
        
        .end-#{$name} {
            justify-content: flex-end;
            text-align: right;
        }
        
        .top-#{$name} {
            align-items: flex-start;
        }
        
        .middle-#{$name} {
            align-items: center;
        }
        
        .bottom-#{$name} {
            align-items: flex-end;
        }
        
        .around-#{$name} {
            justify-content: space-around;
        }
        
        .between-#{$name} {
            justify-content: space-between;
        }
        
        .first-#{$name} {
            order: -1;
        }
        
        .last-#{$name} {
            order: 1;
        }
    }
}
